from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
from itertools import cycle
import pandas as pd
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
API_KEYS = ['QSPA6IIRC5CGQU43']
is_active = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

async def get_sma_data(from_symbol, to_symbol, api_key, interval='5min', time_period=10):
    symbol = f"{from_symbol}{to_symbol}"
    url = f'https://www.alphavantage.co/query?function=SMA&symbol={symbol}&interval={interval}&time_period={time_period}&series_type=close&entitlement=realtime&apikey={api_key}'
    
    response = requests.get(url)
    data = response.json()

    try:
        time_series = data['Technical Analysis: SMA']
        df = pd.DataFrame.from_dict(time_series, orient='index')
        df = df.rename(columns={'SMA': 'SMA'})
        df['SMA'] = df['SMA'].astype(float)
        df = df.sort_index()
        logging.info(f"–î–∞–Ω–Ω—ã–µ SMA –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã {from_symbol}/{to_symbol}")
        return df
    except KeyError:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API –¥–ª—è –ø–∞—Ä—ã {from_symbol}/{to_symbol}: {data}")
        return None

def choose_time_frame(df):
    last_crosses = df['SMA'].diff()
    last_cross_sign = last_crosses.apply(lambda x: 1 if x > 0 else -1)
    last_cross_index = (last_cross_sign != last_cross_sign.shift(1)).idxmax()
    candles_since_cross = len(df) - df.index.get_loc(last_cross_index)

    if candles_since_cross <= 2:
        return "1M"
    elif candles_since_cross <= 5:
        return "2M"
    else:
        return "5M"

def check_for_signal(df, from_symbol, to_symbol, last_signals):
    latest_data = df.iloc[-1]
    previous_data = df.iloc[-2]
    current_sma = latest_data['SMA']
    pair_symbol = f"{from_symbol}/{to_symbol}"
    time_frame = choose_time_frame(df)

    if current_sma > previous_data['SMA'] and last_signals.get(pair_symbol) != 'LONG':
        last_signals[pair_symbol] = 'LONG'
        signal_message = (f"üî•LONGüü¢üîº\nüî•#{pair_symbol}‚òùÔ∏è\n"
                          f"‚åõÔ∏è–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {time_frame}\n"
                          f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìà {current_sma:.4f}")
        logging.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è {pair_symbol}")
        return signal_message
    elif current_sma < previous_data['SMA'] and last_signals.get(pair_symbol) != 'SHORT':
        last_signals[pair_symbol] = 'SHORT'
        signal_message = (f"üî•SHORTüî¥üîΩ\nüî•#{pair_symbol}‚òùÔ∏è\n"
                          f"‚åõÔ∏è–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {time_frame}\n"
                          f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìâ {current_sma:.4f}")
        logging.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–ª—è {pair_symbol}")
        return signal_message
    return None

async def notify_signals(bot, signal_message, chat_id, message_thread_id=None):
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∫–∞–Ω–∞–ª {chat_id}")
    await bot.send_message(chat_id=chat_id, text=signal_message, message_thread_id=message_thread_id)

async def signal_loop(bot, last_signals):
    channels_and_topics = [
        {'chat_id': '-1002243376132', 'message_thread_id': '2'},
        {'chat_id': '-1002290780268', 'message_thread_id': '4'},
    ]
    
    currency_pairs = [
        ('EUR', 'GBP'),
        ('AUD', 'CAD'),
        ('GBP', 'CHF'),
        ('NZD', 'CAD'),
        ('EUR', 'AUD'),
        ('AUD', 'NZD'),
        ('EUR', 'CHF'),
        ('GBP', 'AUD'),
        ('CAD', 'CHF'),
        ('NZD', 'CHF'),
    ]

    api_keys_cycle = cycle(API_KEYS)

    while True:
        if not is_active:
            await asyncio.sleep(5)
            continue

        for from_symbol, to_symbol in currency_pairs:
            api_key = next(api_keys_cycle)
            df_sma = await get_sma_data(from_symbol, to_symbol, api_key)

            if df_sma is not None:
                signal_message = check_for_signal(df_sma, from_symbol, to_symbol, last_signals)
                if signal_message:
                    for channel in channels_and_topics:
                        await notify_signals(
                            bot,
                            signal_message,
                            chat_id=channel['chat_id'],
                            message_thread_id=channel.get('message_thread_id')
                        )
            
            await asyncio.sleep(5)

def startbot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global is_active
    is_active = True
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /startbot")
    update.message.reply_text('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    
def stopbot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global is_active
    is_active = False
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /stopbot")
    update.message.reply_text('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')

async def main():
    token = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
    bot = Bot(token=token)
    last_signals = {}

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    application = Application.builder().token(token).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("startbot", startbot))
    application.add_handler(CommandHandler("stopbot", stopbot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await application.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
    await signal_loop(bot, last_signals)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.stop()

if __name__ == '__main__':
    asyncio.run(main())
