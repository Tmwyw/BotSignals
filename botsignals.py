import requests
import pandas as pd
import numpy as np
import asyncio
from telegram import Bot
from telegram.constants import ParseMode

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Alpha Vantage API –∏ Telegram
API_KEY = 'QSPA6IIRC5CGQU43'
TELEGRAM_TOKEN = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
CHAT_ID = '-1002243376132'
MESSAGE_THREAD_ID = '2'
CURRENCY_PAIR = 'EUR/GBP'

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
ALPHA_VANTAGE_URL = f'https://www.alphavantage.co/query?function=FX_DAILY&from_symbol=EUR&to_symbol=GBP&apikey={API_KEY}'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
def get_historical_data():
    response = requests.get(ALPHA_VANTAGE_URL)
    data = response.json()
    if 'Time Series FX (Daily)' in data:
        return data['Time Series FX (Daily)']
    else:
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Alpha Vantage:', data)
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
def calculate_moving_averages(data):
    df = pd.DataFrame(data).T  # —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –¥–∞—Ç—ã –±—ã–ª–∏ –∏–Ω–¥–µ–∫—Å–æ–º
    df.columns = ['open', 'high', 'low', 'close']
    df = df.astype(float)

    df['SMA_5'] = df['close'].rolling(window=5).mean()  # –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ä–µ–¥–Ω—è—è
    df['SMA_20'] = df['close'].rolling(window=20).mean()  # –¥–ª–∏–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
def generate_signal(df):
    latest = df.iloc[-1]
    previous = df.iloc[-2]
    
    # –ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –¥–ª–∏–Ω–Ω—É—é —Å–≤–µ—Ä—Ö—É -> —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (LONG)
    if latest['SMA_5'] > latest['SMA_20'] and previous['SMA_5'] <= previous['SMA_20']:
        return "üî•LONGüü¢üîº", latest['close']
    # –ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –¥–ª–∏–Ω–Ω—É—é —Å–Ω–∏–∑—É -> —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (SHORT)
    elif latest['SMA_5'] < latest['SMA_20'] and previous['SMA_5'] >= previous['SMA_20']:
        return "üî•SHORTüî¥üîΩ", latest['close']
    else:
        return None, latest['close']

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_signal_to_telegram(price, signal):
    message = f"{signal}\nüî•#EUR/GBP‚òùÔ∏è\nüíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìà {price:.4f}"
    
    bot = Bot(token=TELEGRAM_TOKEN)
    await bot.send_message(chat_id=CHAT_ID, message_thread_id=MESSAGE_THREAD_ID, text=message, parse_mode=ParseMode.MARKDOWN)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def main():
    data = get_historical_data()
    if data:
        df = calculate_moving_averages(data)
        signal, price = generate_signal(df)
        if signal:
            await send_signal_to_telegram(price, signal)

if __name__ == '__main__':
    asyncio.run(main())
