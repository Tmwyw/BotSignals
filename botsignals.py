import logging
from telegram import Update
from telegram.ext import Application, CommandHandler
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
ALPHA_VANTAGE_API_KEY = 'GNP3HU5R5LBILMSB'

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤
assets = {
    "eurusd": ("EUR", "USD"),
    "gold_silver": ("XAU", "XAG"),  # –ó–æ–ª–æ—Ç–æ –∏ —Å–µ—Ä–µ–±—Ä–æ
    "gbpusd": ("GBP", "USD"),
    "nzd_cad": ("NZD", "CAD"),
    "eur_aud": ("EUR", "AUD"),
    "ton": ("TONCOIN", "USD"),  # –¢–æ–Ω–∫–æ–∏–Ω –ø—Ä–æ—Ç–∏–≤ USD
    "eur_chf": ("EUR", "CHF"),
    "microsoft_apple": ("MSFT", "AAPL"),
    "mcdonalds": ("MCD", None),
    "bitcoin": ("BTC", "USD"),
}

def get_currency_data(from_symbol, to_symbol=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –∏–ª–∏ –∞–∫—Ç–∏–≤–µ —Å Alpha Vantage API.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {from_symbol}/{to_symbol}")
    if to_symbol:  # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –∏–ª–∏ –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤
        url = f'https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency={from_symbol}&to_currency={to_symbol}&apikey={ALPHA_VANTAGE_API_KEY}'
    else:  # –î–ª—è –∞–∫—Ü–∏–π –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={from_symbol}&apikey={ALPHA_VANTAGE_API_KEY}'

    response = requests.get(url)
    data = response.json()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if "Realtime Currency Exchange Rate" in data:
        return data['Realtime Currency Exchange Rate']['5. Exchange Rate'], None
    elif "Global Quote" in data:
        return data['Global Quote']['05. price'], None
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {from_symbol}/{to_symbol}")
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def send_signal(update: Update, context, asset: str):
    if asset in assets:
        from_symbol, to_symbol = assets[asset]
        price, error = get_currency_data(from_symbol, to_symbol)

        if error:
            await update.message.reply_text(error)
        else:
            pair_symbol = f"{from_symbol}/{to_symbol}" if to_symbol else from_symbol
            signal_message = (f"üî• –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {pair_symbol}: {price}")
            await update.message.reply_text(signal_message)
    else:
        await update.message.reply_text(f"–ê–∫—Ç–∏–≤ {asset} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

async def handle_command(update: Update, context):
    command = update.message.text[1:]  # –£–±–∏—Ä–∞–µ–º "/"
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")
    await send_signal(update, context, command)

def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤
    for asset in assets.keys():
        application.add_handler(CommandHandler(asset, handle_command))

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã")

if __name__ == '__main__':
    main()
