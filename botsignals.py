import asyncio
from telegram import Bot
from itertools import cycle
import pandas as pd
import requests
import random  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
API_KEYS = ['QSPA6IIRC5CGQU43']

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
last_signals = {}

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
timeframes = ['1M', '2M', '3M', '5M']

async def get_currency_data(from_symbol, to_symbol, api_key):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ —Å Alpha Vantage API.
    """
    url = f'https://www.alphavantage.co/query?function=FX_DAILY&from_symbol={from_symbol}&to_symbol={to_symbol}&entitlement=realtime&apikey={api_key}'
    response = requests.get(url)
    data = response.json()

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        time_series = data['Time Series FX (Daily)']
        df = pd.DataFrame.from_dict(time_series, orient='index')
        df = df.rename(columns={'4. close': 'Close'})  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        df['Close'] = df['Close'].astype(float)
        df = df.sort_index()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        print(f"üì• –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´ üì• –¥–ª—è {from_symbol}/{to_symbol}")
        
        return df
    except KeyError:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API –∫–ª—é—á–∞ {api_key}: {data}")
        return None

def calculate_moving_averages(df, timeframe):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞.
    """
    if timeframe == '1M':
        short_window = 1  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 3 —Å–≤–µ—á–∏
        long_window = 3  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 10 —Å–≤–µ—á–µ–π
    elif timeframe == '2M':
        short_window = 3  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 5 —Å–≤–µ—á–µ–π
        long_window = 7  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 15 —Å–≤–µ—á–µ–π
    elif timeframe == '3M':
        short_window = 5  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 7 —Å–≤–µ—á–µ–π
        long_window = 10  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 20 —Å–≤–µ—á–µ–π
    elif timeframe == '5M':
        short_window = 7  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 10 —Å–≤–µ—á–µ–π
        long_window = 15  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞ 30 —Å–≤–µ—á–µ–π

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    df['Short_MA'] = df['Close'].rolling(window=short_window).mean()
    df['Long_MA'] = df['Close'].rolling(window=long_window).mean()
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    print(f"‚öôÔ∏è –°–ö–û–õ–¨–ó–Ø–©–ò–ï –†–ê–°–°–ß–ò–¢–ê–ù–´ ‚öôÔ∏è –¥–ª—è {timeframe}")
    
    return df

def check_for_signal(df, from_symbol, to_symbol, timeframe):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É.
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ.
    """
    latest_data = df.iloc[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    previous_data = df.iloc[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    current_price = latest_data['Close']  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–∞—Ä—ã

    # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    short_ma = latest_data['Short_MA']
    long_ma = latest_data['Long_MA']

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    pair_symbol = f"{from_symbol}/{to_symbol}"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ (—Ä–∞–Ω–¥–æ–º–Ω–æ 1 –∏–ª–∏ 2)
    risk_assessment = random.choice([1, 2])
    if risk_assessment == 1:
        risk_message = "üü° –û–¶–ï–ù–ö–ê –†–ò–°–ö–ê - 1 üü°"
    else:
        risk_message = "üî¥ –û–¶–ï–ù–ö–ê –†–ò–°–ö–ê - 2 üî¥"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å MarkdownV2
    if short_ma > long_ma and previous_data['Short_MA'] <= previous_data['Long_MA']:
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (LONG)
        signal_message = (f"üì• *–î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´* üì•\n\n"
                          f"‚öôÔ∏è *–°–ö–û–õ–¨–ó–Ø–©–ò–ï –†–ê–°–°–ß–ò–¢–ê–ù–´* ‚öôÔ∏è\n"
                          f"\(S\/MA: {short_ma:.4f}, L\/MA: {long_ma:.4f}\)\n\n"
                          f"üü¢ *LONG ‚¨ÜÔ∏è*\n\n"
                          f"üí∞ *{pair_symbol} üëàüèª*\n\n"
                          f"‚åõÔ∏è *–í–†–ï–ú–Ø –°–î–ï–õ–ö–ò: {timeframe}*\n\n"
                          f"{risk_message}")
        return 'LONG', signal_message
    elif short_ma < long_ma and previous_data['Short_MA'] >= previous_data['Long_MA']:
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (SHORT)
        signal_message = (f"üì• *–î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ï–ù–´* üì•\n\n"
                          f"‚öôÔ∏è *–°–ö–û–õ–¨–ó–Ø–©–ò–ï –†–ê–°–°–ß–ò–¢–ê–ù–´* ‚öôÔ∏è\n"
                          f"\(S\/MA: {short_ma:.4f}, L\/MA: {long_ma:.4f}\)\n\n"
                          f"üî¥ *SHORT ‚¨áÔ∏è*\n\n"
                          f"üí∞ *{pair_symbol} üëàüèª*\n\n"
                          f"‚åõÔ∏è *–í–†–ï–ú–Ø –°–î–ï–õ–ö–ò: {timeframe}*\n\n"
                          f"{risk_message}")
        return 'SHORT', signal_message
    return None, None




async def notify_signals(bot, signal_message, chat_id, message_thread_id=None):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    message_thread_id ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫.
    """
    await bot.send_message(chat_id=chat_id, text=signal_message, parse_mode="MarkdownV2", message_thread_id=message_thread_id)


async def main():
    token = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
    bot = Bot(token=token)

    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç–æ–ø–∏–∫–æ–≤
    channels_and_topics = [
        {'chat_id': '-1002243376132', 'message_thread_id': '2'},  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
        {'chat_id': '-1002290780268', 'message_thread_id': '4'},  # –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
    ]
    
    # –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
    currency_pairs = [
        ('EUR', 'USD'),  # EUR/USD (OTC)
        ('GBP', 'USD'),  # GBP/USD (OTC)
        ('USD', 'CHF'),  # USD/CHF (OTC)
        ('AUD', 'CAD'),  # AUD/CAD (OTC)
        ('EUR', 'GBP'),  # EUR/GBP (OTC)
        ('USD', 'MXN'),  # USD/MXN (OTC)
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ API –∫–ª—é—á–µ–π
    api_keys_cycle = cycle(API_KEYS)

    while True:
        for from_symbol, to_symbol in currency_pairs:
            api_key = next(api_keys_cycle)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
            df = await get_currency_data(from_symbol, to_symbol, api_key)

            if df is not None:
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
                for timeframe in timeframes:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                    df_with_ma = calculate_moving_averages(df, timeframe)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                    signal_type, signal_message = check_for_signal(df_with_ma, from_symbol, to_symbol, timeframe)

                    if signal_message:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                        signal_key = (from_symbol, to_symbol, timeframe)
                        if last_signals.get(signal_key) != signal_type:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
                            last_signals[signal_key] = signal_type
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –∏ —Ç–æ–ø–∏–∫–∏
                            for channel in channels_and_topics:
                                await notify_signals(
                                    bot,
                                    signal_message,
                                    chat_id=channel['chat_id'],
                                    message_thread_id=channel.get('message_thread_id')
                                )
                            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_type} –¥–ª—è {from_symbol}/{to_symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}")
                    else:
                        print(f"–°–∏–≥–Ω–∞–ª –¥–ª—è {from_symbol}/{to_symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            await asyncio.sleep(5)

if __name__ == '__main__':
    asyncio.run(main())
