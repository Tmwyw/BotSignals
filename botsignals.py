import requests
import time
import logging
import random  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å random
from telegram import Bot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
API_KEY = 'QSPA6IIRC5CGQU43'  # –ö–ª—é—á Alpha Vantage
API_URL = 'https://www.alphavantage.co/query'
TELEGRAM_BOT_TOKEN = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ Telegram
channels = [
    {'chat_id': '-1002243376132', 'message_thread_id': '2'},  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
    {'chat_id': '-1002290780268', 'message_thread_id': '4'}   # –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(filename='bot_logs.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
assets = {
    'forex': ['EUR/USD', 'USD/JPY', 'GBP/USD', 'AUD/USD', 'USD/CAD', 'NZD/USD', 'CHF/JPY']
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
risk_percentage = 0.35  # –†–∏—Å–∫ 35%

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Alpha Vantage
def get_data(symbol):
    params = {
        'function': 'FX_INTRADAY',
        'symbol': symbol,
        'interval': '1min',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        'apikey': API_KEY,
        'datatype': 'json',
        'outputsize': 'compact',
    }
    response = requests.get(API_URL, params=params)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.info(f"Fetching data for {symbol}. Response: {response.status_code}")
    
    if response.status_code != 200:
        logging.error(f"Error fetching data for {symbol}: {response.text}")
        return {}

    return response.json()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
def generate_random_signal(asset):
    current_price = random.uniform(1.0, 2.0)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    direction = random.choice(['LONG', 'SHORT'])  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
    stop_loss = current_price - (current_price * 0.02) if direction == 'LONG' else current_price + (current_price * 0.02)
    
    # –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    dynamic_risk = risk_percentage * current_price
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    signal = f"""
üü¢ {direction} üîº

üíµ {asset}

–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:üîº {current_price:.5f}

‚õîÔ∏èSTOP-DOBOR; üí• ‚ûñ {stop_loss:.5f}

ü¶† —Ä–∏—Å–∫; ü•µ ‚ûñ {dynamic_risk:.2f}%
"""
    logging.info(f"Generated random signal for {asset}: {signal}")
    return signal

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
def send_signal(signal):
    for channel in channels:
        bot.send_message(chat_id=channel['chat_id'], text=signal, message_thread_id=channel['message_thread_id'])
    logging.info(f"Signal sent: {signal}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def run_bot():
    logging.info("Bot is starting...")
    while True:
        try:
            for asset in assets['forex']:
                data = get_data(asset)
                if not data:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
                    continue
                
                signal = generate_random_signal(asset)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
                send_signal(signal)

            time.sleep(300)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ (5 –º–∏–Ω—É—Ç)
        except Exception as e:
            logging.error(f"Error: {e}")
            time.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É

if __name__ == "__main__":
    run_bot()
