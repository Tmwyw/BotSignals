from telegram import Bot
import time
from itertools import cycle
import pandas as pd
import requests

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
API_KEYS = ['QSPA6IIRC5CGQU43']

def get_currency_data(from_symbol, to_symbol, api_key):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ —Å Alpha Vantage API.
    """
    url = f'https://www.alphavantage.co/query?function=FX_DAILY&from_symbol={from_symbol}&to_symbol={to_symbol}&apikey={api_key}&entitlement=realtime'
    response = requests.get(url)
    data = response.json()

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        time_series = data['Time Series FX (Daily)']
        df = pd.DataFrame.from_dict(time_series, orient='index')
        df = df.rename(columns={'4. close': 'Close'})  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        df['Close'] = df['Close'].astype(float)
        df = df.sort_index()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        return df
    except KeyError:
        print("–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API:", data)
        return None

def calculate_moving_averages(df, short_window=5, long_window=20):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö.
    """
    df['Short_MA'] = df['Close'].rolling(window=short_window).mean()
    df['Long_MA'] = df['Close'].rolling(window=long_window).mean()
    return df

def choose_time_frame(df):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö.
    """
    last_crosses = df['Short_MA'] - df['Long_MA']  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ —Å—Ä–µ–¥–Ω–∏–º–∏
    last_crosses_sign = last_crosses.apply(lambda x: 1 if x > 0 else -1)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    last_cross_index = (last_crosses_sign != last_crosses_sign.shift(1)).idxmax()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    candles_since_cross = len(df) - df.index.get_loc(last_cross_index)

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    if candles_since_cross <= 2:
        return "1M"
    elif candles_since_cross <= 5:
        return "2M"
    else:
        return "5M"

def check_for_signal(df, from_symbol, to_symbol):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É.
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ.
    """
    latest_data = df.iloc[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    previous_data = df.iloc[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    current_price = latest_data['Close']  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–∞—Ä—ã

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    pair_symbol = f"{from_symbol}/{to_symbol}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏
    time_frame = choose_time_frame(df)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    if latest_data['Short_MA'] > latest_data['Long_MA'] and previous_data['Short_MA'] <= previous_data['Long_MA']:
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (LONG)
        signal_message = (f"üî•LONGüü¢üîº\nüî•#{pair_symbol}‚òùÔ∏è\n"
                          f"‚åõÔ∏è–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {time_frame}\n"
                          f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìà {current_price:.4f}")
        return signal_message
    elif latest_data['Short_MA'] < latest_data['Long_MA'] and previous_data['Short_MA'] >= previous_data['Long_MA']:
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (SHORT)
        signal_message = (f"üî•SHORTüî¥üîΩ\nüî•#{pair_symbol}‚òùÔ∏è\n"
                          f"‚åõÔ∏è–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {time_frame}\n"
                          f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìâ {current_price:.4f}")
        return signal_message
    return None

def notify_signals(bot, signal_message, chat_id, message_thread_id=None):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    message_thread_id ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫.
    """
    bot.send_message(chat_id=chat_id, text=signal_message, message_thread_id=message_thread_id)

def main():
    token = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
    bot = Bot(token=token)

    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç–æ–ø–∏–∫–æ–≤
    channels_and_topics = [
        {'chat_id': '-1002243376132', 'message_thread_id': '2'},  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
        {'chat_id': '-1002290780268', 'message_thread_id': '4'},  # –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
    ]
    
    # –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
    currency_pairs = [
        ('EUR', 'GBP'),
        ('AUD', 'CAD'),
        ('GBP', 'CHF'),
        ('NZD', 'CAD'),
        ('EUR', 'AUD'),
        ('AUD', 'NZD'),
        ('EUR', 'CHF'),
        ('GBP', 'AUD'),
        ('CAD', 'CHF'),
        ('NZD', 'CHF'),
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ API –∫–ª—é—á–µ–π
    api_keys_cycle = cycle(API_KEYS)

    while True:
        for from_symbol, to_symbol in currency_pairs:
            api_key = next(api_keys_cycle)
            df = get_currency_data(from_symbol, to_symbol, api_key)

            if df is not None:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
                df_with_ma = calculate_moving_averages(df)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                signal_message = check_for_signal(df_with_ma, from_symbol, to_symbol)
                if signal_message:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –∏ —Ç–æ–ø–∏–∫–∏
                    for channel in channels_and_topics:
                        notify_signals(
                            bot,
                            signal_message,
                            chat_id=channel['chat_id'],
                            message_thread_id=channel.get('message_thread_id')
                        )
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            time.sleep(5)

if __name__ == '__main__':
    main()
