from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, CallbackContext
import requests

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
API_KEYS = ['–¢–í–û–ô_–ö–õ–Æ–ß_1', '–¢–í–û–ô_–ö–õ–Æ–ß_2']
API_KEY = API_KEYS[0]

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤
assets = {
    "eurusd": ("EUR", "USD"),
    "gold_silver": ("XAU", "XAG"),  # –ó–æ–ª–æ—Ç–æ –∏ —Å–µ—Ä–µ–±—Ä–æ
    "gbpusd": ("GBP", "USD"),
    "nzd_cad": ("NZD", "CAD"),
    "eur_aud": ("EUR", "AUD"),
    "ton": ("TONCOIN", "USD"),  # –¢–æ–Ω–∫–æ–∏–Ω –ø—Ä–æ—Ç–∏–≤ USD
    "eur_chf": ("EUR", "CHF"),
    "microsoft_apple": ("MSFT", "AAPL"),
    "mcdonalds": ("MCD", None),
    "bitcoin": ("BTC", "USD"),
}

def get_currency_data(from_symbol, to_symbol=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –∏–ª–∏ –∞–∫—Ç–∏–≤–µ —Å Alpha Vantage API.
    """
    if to_symbol:  # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –∏–ª–∏ –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤
        url = f'https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency={from_symbol}&to_currency={to_symbol}&apikey={API_KEY}'
    else:  # –î–ª—è –∞–∫—Ü–∏–π, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={from_symbol}&apikey={API_KEY}'

    response = requests.get(url)
    data = response.json()

    if "Error Message" in data:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {from_symbol}/{to_symbol}: {data['Error Message']}"
    
    if "Realtime Currency Exchange Rate" in data:
        rate = data['Realtime Currency Exchange Rate']['5. Exchange Rate']
        return rate, None
    elif "Global Quote" in data:
        price = data['Global Quote']['05. price']
        return price, None
    return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"

def send_signal(update: Update, context: CallbackContext, asset: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É.
    """
    if asset in assets:
        from_symbol, to_symbol = assets[asset]
        price, error = get_currency_data(from_symbol, to_symbol)

        if error:
            update.message.reply_text(error)
        else:
            pair_symbol = f"{from_symbol}/{to_symbol}" if to_symbol else from_symbol
            signal_message = (f"üî•–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è {pair_symbol}: {price}")
            update.message.reply_text(signal_message)
    else:
        update.message.reply_text(f"–ê–∫—Ç–∏–≤ {asset} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

def handle_command(update: Update, context: CallbackContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–∞.
    """
    command = update.message.text[1:]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ (—É–±–∏—Ä–∞–µ–º "/")
    send_signal(update, context, command)

def main():
    token = '–¢–í–û–ô_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù'
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
    for asset in assets.keys():
        application.add_handler(CommandHandler(asset, handle_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
