import requests
import time
import logging
from telegram import Bot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
API_KEY = 'QSPA6IIRC5CGQU43'  # –ö–ª—é—á Alpha Vantage
API_URL = 'https://www.alphavantage.co/query'
TELEGRAM_BOT_TOKEN = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ Telegram
channels = [
    {'chat_id': '-1002243376132', 'message_thread_id': '2'},  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
    {'chat_id': '-1002290780268', 'message_thread_id': '4'}   # –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(filename='bot_logs.log', level=logging.INFO)

# –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
assets = {
    'forex': ['EUR/USD', 'USD/JPY', 'GBP/USD', 'AUD/USD', 'USD/CAD', 'NZD/USD', 'CHF/JPY']
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RSI
rsi_period = 7
overbought_threshold = 80  # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
oversold_threshold = 20     # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Alpha Vantage
def get_data(symbol):
    params = {
        'function': 'FX_INTRADAY',
        'symbol': symbol,
        'interval': '1min',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        'apikey': API_KEY,
        'datatype': 'json',
        'outputsize': 'compact',
    }
    response = requests.get(API_URL, params=params)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.info(f"Data for {symbol}: {response.json()}")
    
    return response.json()

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ RSI
def calculate_rsi(prices, period):
    if len(prices) < period:
        logging.info("Not enough data to calculate RSI.")
        return None
    
    deltas = [j - i for i, j in zip(prices[:-1], prices[1:])]
    gain = sum(x for x in deltas if x > 0) / period
    loss = -sum(x for x in deltas if x < 0) / period
    rs = gain / loss if loss != 0 else 0
    rsi = 100 - (100 / (1 + rs))
    
    logging.info(f"RSI for period {period}: {rsi}")
    
    return rsi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI
def check_signals(data):
    prices = [float(candle['4. close']) for candle in data['Time Series FX (1min)'].values()]
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    logging.info(f"Prices: {prices}")
    
    rsi = calculate_rsi(prices, rsi_period)

    # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–Ω–≥–∞
    if rsi is not None and rsi < oversold_threshold:
        logging.info(f"Signal: LONG (RSI: {rsi})")
        return 'LONG', prices[-1]
    
    # –£—Å–ª–æ–≤–∏—è –¥–ª—è —à–æ—Ä—Ç–∞
    elif rsi is not None and rsi > overbought_threshold:
        logging.info(f"Signal: SHORT (RSI: {rsi})")
        return 'SHORT', prices[-1]

    logging.info(f"No signals generated.")
    return None, None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
def send_signal(direction, asset, price):
    signal = f"‚¨ÜÔ∏è LONG üü¢\nüî• {asset} üëàüèª\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price} üìà" if direction == 'LONG' else \
             f"‚¨áÔ∏è SHORT üî¥\nüî• {asset} üëàüèª\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price} üìâ"
    
    for channel in channels:
        bot.send_message(chat_id=channel['chat_id'], text=signal, message_thread_id=channel['message_thread_id'])
    
    logging.info(f"Signal sent: {direction} {asset} at {price}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def run_bot():
    while True:
        try:
            for asset in assets['forex']:
                data = get_data(asset)
                signals, price = check_signals(data)

                # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
                logging.info(f"Checking signals for {asset}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
                if signals:
                    send_signal(signals, asset, price)
            time.sleep(30)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
        except Exception as e:
            logging.error(f"Error: {e}")
            time.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É

if __name__ == "__main__":
    run_bot()
