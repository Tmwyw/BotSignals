import requests
import time
import logging
from telegram import Bot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
API_KEY = 'QSPA6IIRC5CGQU43'  # –ö–ª—é—á Alpha Vantage
API_URL = 'https://www.alphavantage.co/query'
TELEGRAM_BOT_TOKEN = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ Telegram
channels = [
    {'chat_id': '-1002243376132', 'message_thread_id': '2'},  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
    {'chat_id': '-1002290780268', 'message_thread_id': '4'}   # –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(filename='bot_logs.log', level=logging.INFO)

# –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
assets = {
    'forex': ['EUR/USD', 'USD/JPY', 'GBP/USD', 'AUD/USD', 'USD/CAD', 'NZD/USD', 'CHF/JPY']
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
risk_percentage = 0.35  # –†–∏—Å–∫ 35%

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Alpha Vantage
def get_data(symbol):
    params = {
        'function': 'FX_INTRADAY',
        'symbol': symbol,
        'interval': '1min',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 1-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        'apikey': API_KEY,
        'datatype': 'json',
        'outputsize': 'compact',
    }
    response = requests.get(API_URL, params=params)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.info(f"Data for {symbol}: {response.json()}")
    
    return response.json()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏
def calculate_fibonacci_levels(prices):
    max_price = max(prices)
    min_price = min(prices)
    difference = max_price - min_price
    
    # –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
    levels = {
        "0.0%": max_price,
        "23.6%": max_price - difference * 0.236,
        "38.2%": max_price - difference * 0.382,
        "50.0%": (max_price + min_price) / 2,
        "61.8%": max_price - difference * 0.618,
        "100%": min_price
    }
    
    logging.info(f"Fibonacci levels: {levels}")
    return levels

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏
def generate_signal(data, asset):
    prices = [float(candle['4. close']) for candle in data['Time Series FX (1min)'].values()]
    
    if len(prices) < 2:
        logging.info("Not enough data to generate signal.")
        return None
    
    fibonacci_levels = calculate_fibonacci_levels(prices)
    current_price = prices[-1]

    # –£—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ LONG
    if current_price < fibonacci_levels["23.6%"]:
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        stop_loss = fibonacci_levels["61.8%"]
        
        # –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞
        dynamic_risk = risk_percentage * current_price
        
        # –†–∞—Å—á–µ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
        take_profit_1 = fibonacci_levels["23.6%"]
        take_profit_2 = fibonacci_levels["38.2%"]
        take_profit_3 = fibonacci_levels["50.0%"]
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        signal = f"""
üü¢ LONG üîº

üíµ {asset}

–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:üîº {current_price:.5f}

üéØTake Profit 1Ô∏è‚É£: üìå ‚ûñ {take_profit_1:.5f}
üéØTake Profit 2Ô∏è‚É£: üìå ‚ûñ {take_profit_2:.5f}
üéØTake Profit 3Ô∏è‚É£: üìå ‚ûñ {take_profit_3:.5f}

‚õîÔ∏èSTOP-DOBOR; üí• ‚ûñ {stop_loss:.5f}

ü¶† —Ä–∏—Å–∫; ü•µ ‚ûñ {dynamic_risk:.2f}%
"""
        return signal

    logging.info(f"No signals generated for {asset}.")
    return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
def send_signal(signal):
    for channel in channels:
        bot.send_message(chat_id=channel['chat_id'], text=signal, message_thread_id=channel['message_thread_id'])
    logging.info(f"Signal sent: {signal}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
def run_bot():
    while True:
        try:
            for asset in assets['forex']:
                data = get_data(asset)
                signal = generate_signal(data, asset)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
                if signal:
                    send_signal(signal)
            time.sleep(0)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
        except Exception as e:
            logging.error(f"Error: {e}")
            time.sleep(0)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É

if __name__ == "__main__":
    run_bot()
