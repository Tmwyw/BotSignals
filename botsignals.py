from telegram import Bot
import time
from itertools import cycle
import pandas as pd
import requests
import asyncio

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
API_KEYS = ['QSPA6IIRC5CGQU4']

async def get_sma_data(from_symbol, to_symbol, api_key, interval='5min', time_period=10):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö SMA –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ —Å Alpha Vantage API.
    """
    symbol = f"{from_symbol}{to_symbol}"
    url = f'https://www.alphavantage.co/query?function=SMA&symbol={symbol}&interval={interval}&time_period={time_period}&series_type=close&entitlement=realtime&apikey={api_key}'
    
    response = requests.get(url)
    data = response.json()

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        time_series = data['Technical Analysis: SMA']
        df = pd.DataFrame.from_dict(time_series, orient='index')
        df = df.rename(columns={'SMA': 'SMA'})  # –ë–µ—Ä–µ–º SMA
        df['SMA'] = df['SMA'].astype(float)
        df = df.sort_index()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        return df
    except KeyError:
        print("–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API:", data)
        return None

def choose_time_frame(df):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (SMA).
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º SMA
    last_crosses = df['SMA'].diff()  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π SMA

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è SMA
    last_cross_sign = last_crosses.apply(lambda x: 1 if x > 0 else -1)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫
    last_cross_index = (last_cross_sign != last_cross_sign.shift(1)).idxmax()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å –º–æ–º–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    candles_since_cross = len(df) - df.index.get_loc(last_cross_index)

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å –º–æ–º–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if candles_since_cross <= 2:
        return "1M"
    elif candles_since_cross <= 5:
        return "2M"
    else:
        return "5M"

def check_for_signal(df, from_symbol, to_symbol):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É.
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ.
    """
    latest_data = df.iloc[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    previous_data = df.iloc[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    current_sma = latest_data['SMA']  # –¢–µ–∫—É—â–∞—è SMA

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    pair_symbol = f"{from_symbol}/{to_symbol}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏
    time_frame = choose_time_frame(df)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏—è SMA –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
    if current_sma > previous_data['SMA']:
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (LONG)
        signal_message = (f"üî•LONGüü¢üîº\nüî•#{pair_symbol}‚òùÔ∏è\n"
                          f"‚åõÔ∏è–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {time_frame}\n"
                          f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìà {current_sma:.4f}")
        return signal_message
    elif current_sma < previous_data['SMA']:
        # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (SHORT)
        signal_message = (f"üî•SHORTüî¥üîΩ\nüî•#{pair_symbol}‚òùÔ∏è\n"
                          f"‚åõÔ∏è–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {time_frame}\n"
                          f"üíµ–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:üìâ {current_sma:.4f}")
        return signal_message
    return None

async def notify_signals(bot, signal_message, chat_id, message_thread_id=None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    message_thread_id ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫.
    """
    await bot.send_message(chat_id=chat_id, text=signal_message, message_thread_id=message_thread_id)

async def main():
    token = '7449818362:AAHrejKv90PyRkrgMTdZvHzT9p44ePlZYcg'
    bot = Bot(token=token)

    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç–æ–ø–∏–∫–æ–≤
    channels_and_topics = [
        {'chat_id': '-1002243376132', 'message_thread_id': '2'},  # –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
        {'chat_id': '-1002290780268', 'message_thread_id': '4'},  # –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª, —Ç–æ–ø–∏–∫
    ]
    
    # –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
    currency_pairs = [
        ('EUR', 'GBP'),
        ('AUD', 'CAD'),
        ('GBP', 'CHF'),
        ('NZD', 'CAD'),
        ('EUR', 'AUD'),
        ('AUD', 'NZD'),
        ('EUR', 'CHF'),
        ('GBP', 'AUD'),
        ('CAD', 'CHF'),
        ('NZD', 'CHF'),
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ API –∫–ª—é—á–µ–π
    api_keys_cycle = cycle(API_KEYS)

    while True:
        for from_symbol, to_symbol in currency_pairs:
            api_key = next(api_keys_cycle)

            # –ü–æ–ª—É—á–∞–µ–º SMA –¥–∞–Ω–Ω—ã–µ
            df_sma = await get_sma_data(from_symbol, to_symbol, api_key)

            if df_sma is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                signal_message = check_for_signal(df_sma, from_symbol, to_symbol)
                if signal_message:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –∏ —Ç–æ–ø–∏–∫–∏
                    for channel in channels_and_topics:
                        await notify_signals(
                            bot,
                            signal_message,
                            chat_id=channel['chat_id'],
                            message_thread_id=channel.get('message_thread_id')
                        )
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
            await asyncio.sleep(5)

if __name__ == '__main__':
    asyncio.run(main())
